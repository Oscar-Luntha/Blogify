// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  AUTHOR
}
model User{
  id String @id @default(cuid())
  clerkId String @unique
  email String @unique
  name String? 
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt

  posts Post[] @relation("UserPosts")
  comments Comment[] @relation("UserComments")
  likes Like[] @relation("UserLikes")
}

model Post {
  id String @id @default(cuid())
  title String
  content String
  published Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId String
  author User @relation("UserPosts", fields: [authorId], references: [id])
  comments Comment[] @relation("PostComments")
  likes Like[] @relation("PostLikes")
}

model Comment{
  id String @id @default(cuid())
  content String
  createdAt DateTime @default(now())

  authorId String
  author User @relation("UserComments", fields: [authorId], references: [id])
  postId String
  post Post @relation("PostComments", fields: [postId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation("UserLikes", fields: [userId], references: [id])

  postId    String
  post      Post     @relation("PostLikes", fields: [postId], references: [id])

  @@unique([userId, postId]) // Prevent duplicate likes per post per user
}
